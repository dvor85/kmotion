#!/usr/bin/env python
# Copyright 2008 David Selby dave6502@googlemail.com
# This file is part of kmotion.
# kmotion is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# kmotion is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with kmotion.  If not, see <http://www.gnu.org/licenses/>.
"""
Exports various methods used to initialize motion configuration. These methods
have been moved to this seperate module to reduce issues when the motion API
changes. All changes should be in just this module.
"""

import ConfigParser
import os

import logger


class InitMotion:
    
    log_level = 'WARNING'
    def __init__(self, settings):
        
        self.logger = logger.Logger('init_motion', InitMotion.log_level)
        self.settings = settings
        self.kmotion_dir = self.settings.get('DEFAULT', 'kmotion_dir')
        
        self.motion_conf_dir = '%s/core/motion_conf' % self.kmotion_dir
        if not os.path.isdir(self.motion_conf_dir):
            os.makedirs(self.motion_conf_dir, mode=0755)
            
        self.images_dbase_dir = self.settings.get('DEFAULT','images_dbase_dir')     
        self.ramdisk_dir = self.settings.get('DEFAULT', 'ramdisk_dir')
        
        self.feeds = {}
        i=1
        for host in self.settings.sections():
            if self.settings.getboolean(host, 'feed_enabled'):
                self.feeds[i] = host
                i+=1
        


    def gen_motion_configs(self):
        """
        Generates the motion.conf and thread??.conf files from www_rc and virtual
        motion conf files
            
        args    : kmotion_dir ... the 'root' directory of kmotion
        excepts : 
        return  : none
        """

        # delete all files in motion_conf skipping .svn directories
        for del_file in [del_file for del_file in os.listdir(self.motion_conf_dir) 
                     if os.path.isfile('%s/%s' % (self.motion_conf_dir, del_file))]:
            os.remove('%s/%s' % (self.motion_conf_dir, del_file))          
    
        if len(self.feeds) > 0:  # only populate 'motion_conf' if valid feeds
            self.gen_motion_conf()
            self.gen_threads_conf()
      
    
    def gen_motion_conf(self):
        """
        Generates the motion.conf file from www_rc and the virtual motion conf files
            
        args    : kmotion_dir ... the 'root' directory of kmotion
              feed_list ...   a list of enabled feeds
              ramdisk_dir ... the ramdisk directory
        excepts : 
        return  : none
        """
    
        with open('%s/motion.conf' % self.motion_conf_dir, 'w') as f_obj1:
            print >> f_obj1, '''
# ------------------------------------------------------------------------------
# This config file has been automatically generated by kmotion
# Do __NOT__ modify it in any way.
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# 'default' section
# ------------------------------------------------------------------------------

quiet on
daemon off
control_port 8080
control_localhost on
'''
    
            for feed in self.feeds.keys():
                print >> f_obj1, 'thread %s/thread%i.conf\n' % (self.motion_conf_dir, feed)
      
    def gen_threads_conf(self):
        """
        Generates the thread??.conf files from www_rc and the virtual motion conf 
        files
            
        args    : kmotion_dir ...      the 'root' directory of kmotion
              feed_list ...        a list of enabled feeds
              ramdisk_dir ...      the ram disk directory
              images_dbase_dir ... the images dbase directory
        excepts : 
        return  : none
        """
    
        for feed in self.feeds.keys():
            with open('%s/thread%i.conf' % (self.motion_conf_dir, feed), 'w') as f_obj1:
                
                for mopt in self.settings.options(self.feeds[feed]):
                    if mopt.find('motion.')>-1:
                        opt = mopt.replace('motion.','')
                        print >> f_obj1, opt, self.settings.get(self.feeds[feed], mopt)
            
                # feed mask, 
                if self.settings.get(self.feeds[feed], 'feed_mask') != '0#0#0#0#0#0#0#0#0#0#0#0#0#0#0#':
                    print >> f_obj1, 'mask_file %s/core/masks/mask%i.pgm' % (self.kmotion_dir, feed)  
            
                print >> f_obj1, '''
# ------------------------------------------------------------------------------
# 'override' section
# ------------------------------------------------------------------------------

snapshot_interval 1
'''
                print >> f_obj1, 'target_dir %s' % self.ramdisk_dir
        
                # device and input
                feed_device = int(self.settings.get(self.feeds[feed], 'feed_device'))
                if feed_device > -1:  # /dev/video? device
                    print >> f_obj1, 'videodevice /dev/video%s' % feed_device
                    print >> f_obj1, 'input %s' % self.settings.get(self.feeds[feed], 'feed_input')
                else:  # netcam
                    print >> f_obj1, 'netcam_url  %s' % self.settings.get(self.feeds[feed], 'feed_url')
                    print >> f_obj1, 'netcam_proxy %s' % self.settings.get(self.feeds[feed], 'feed_proxy')
                    print >> f_obj1, 'netcam_userpass %s:%s' % (self.settings.get(self.feeds[feed], 'feed_username'), self.settings.get(self.feeds[feed], 'feed_password'))
            
                print >> f_obj1, 'width %s' % self.settings.get(self.feeds[feed], 'feed_width') 
                print >> f_obj1, 'height %s' % self.settings.get(self.feeds[feed], 'feed_height') 
        
                # show motion box
                if self.settings.getboolean(self.feeds[feed], 'feed_show_box'): 
                    print >> f_obj1, 'locate on'
             
                # ptz enabled, if 'ptz_track_type' == 9, useing plugins, disable here
                if self.settings.getboolean(self.feeds[feed], 'ptz_enabled') and self.settings.getint(self.feeds[feed], 'ptz_track_type') < 9: 
                    print >> f_obj1, 'track_type %s' % self.settings.get(self.feeds[feed], 'ptz_track_type')
            

                #print >> f_obj1, 'output_normal off'
                #print >> f_obj1, 'jpeg_filename %s/%%Y%%m%%d/%i/snap/%%H%%M%%S' % (self.images_dbase_dir, feed)
        
                print >> f_obj1, 'snapshot_filename %i/%%Y%%m%%d%%H%%M%%S' % feed
                print >> f_obj1, 'on_event_start %s/core/event_start.sh %i' % (self.kmotion_dir, feed)
                print >> f_obj1, 'on_event_end %s/core/event_end.sh %i' % (self.kmotion_dir, feed)
                print >> f_obj1, 'on_camera_lost %s/core/camera_lost.sh %i' % (self.kmotion_dir, feed)
                print >> f_obj1, 'on_picture_save %s/core/picture_save.sh %%f' % (self.kmotion_dir)
        
        
    
# Module test code

if __name__ == '__main__':
    
    print '\nModule self test ... generating motion.conf and threads\n'
    kmotion_dir = os.path.abspath('..')
    settings = ConfigParser.SafeConfigParser()
    settings.read(os.path.join(kmotion_dir,'settings.cfg'))
    settings.set('DEFAULT', 'kmotion_dir', kmotion_dir)
    InitMotion(settings).gen_motion_configs()


