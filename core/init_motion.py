# -*- coding: utf-8 -*-

"""
Exports various methods used to initialize motion configuration. These methods
have been moved to this seperate module to reduce issues when the motion API
changes. All changes should be in just this module.
"""

from core import logger
from core.config import Settings
from core import utils
from pathlib import Path

log = logger.getLogger('kmotion', logger.ERROR)


class InitMotion:

    def __init__(self, kmotion_dir):
        self.kmotion_dir = kmotion_dir
        cfg = Settings.get_instance(kmotion_dir)
        config_main = cfg.get('kmotion_rc')
        log.setLevel(min(config_main['log_level'], log.getEffectiveLevel()))
        self.config = cfg.get('www_rc')

        self.images_dbase_dir = Path(config_main['images_dbase_dir'])
        self.ramdisk_dir = Path(config_main['ramdisk_dir'])
        self.motion_webcontrol_port = config_main.get('motion_webcontrol_port', 8080)

        self.camera_ids = sorted([f for f in self.config['feeds'] if self.config['feeds'][f].get('feed_enabled', False)])

    def create_mask(self, feed):
        """
        Create a motion PGM mask from 'mask_hex_string' for feed 'feed'. Save it
        as ../core/masks/mask??.png.

        args    : kmotion_dir ...  the 'root' directory of kmotion
                  feed ...         the feed number
                  mask_hex_str ... the encoded mask hex string
        excepts :
        return  : none
        """

        mask_hex_str = self.config['feeds'][feed]['feed_mask']
        log.debug(f'create_mask() - mask hex string: {mask_hex_str}')

        image_width = self.config['feeds'][feed]['feed_width']
        image_height = self.config['feeds'][feed]['feed_height']

        log.debug(f'create_mask() - width: {image_width}  height: {image_height}')

        black_px = b'\x00'
        white_px = b'\xFF'

        mask = b''
        mask_hex_split = mask_hex_str.split('#')
        px_yptr = 0

        for y in range(15):

            tmp_dec = int(mask_hex_split[y], 16)
            px_xptr = 0
            image_line = b''

            for x in range(15, 0, -1):

                px_mult = int((image_width - px_xptr) / x)
                px_xptr += px_mult

                bin_ = tmp_dec & 16384
                tmp_dec <<= 1

                if bin_ == 16384:
                    image_line += black_px * px_mult
                else:
                    image_line += white_px * px_mult

            px_mult = int((image_height - px_yptr) / (15 - y))
            px_yptr += px_mult

            mask += image_line * px_mult

        masks_dir = Path(self.kmotion_dir, 'core', 'masks')
        utils.mkdir(masks_dir)
        with Path(masks_dir, f'mask{feed:02d}.pgm').open(mode='wb') as f_obj:
            f_obj.write(b'P5\n')
            f_obj.write(utils.utf(f'{image_width} {image_height}\n'))
            f_obj.write(b'255\n')
            f_obj.write(mask)
        log.debug('create_mask() - mask written')

    def gen_motion_configs(self):
        """
        Generates the motion.conf and camera??.conf files from www_rc and virtual
        motion conf files

        args    : kmotion_dir ... the 'root' directory of kmotion
        excepts :
        return  : none
        """

        motion_conf_dir = Path(self.kmotion_dir, 'core', 'motion_conf')
        utils.mkdir(motion_conf_dir)
        # delete all files in motion_conf
        for del_file in motion_conf_dir.glob('*'):
            if del_file.is_file():
                del_file.unlink()

        if len(self.camera_ids) > 0:  # only populate 'motion_conf' if valid feeds
            self.gen_motion_conf()
            self.gen_cameras_conf()

    def gen_motion_conf(self):
        """
        Generates the motion.conf file from www_rc and the virtual motion conf files
        """

        with Path(self.kmotion_dir, 'core', 'motion_conf', 'motion.conf').open(mode='w') as f_obj1:
            f_obj1.write(f'''
# ------------------------------------------------------------------------------
# This config file has been automatically generated by kmotion
# Do __NOT__ modify it in any way.
# ------------------------------------------------------------------------------

daemon off
quiet on
webcontrol_localhost on
webcontrol_port {self.motion_webcontrol_port}
#webcontrol_interface 2
stream_localhost on
text_right %Y-%m-%d\\n%T
text_left CAMERA %t
#movie_output off
despeckle_filter EedDl

''')
            print(*[f'camera {self.kmotion_dir}/core/motion_conf/camera{feed:02d}.conf' for feed in self.camera_ids], file=f_obj1, sep='\n')

    def gen_cameras_conf(self):
        """
        Generates the camera??.conf files from www_rc and the virtual motion conf
        files
        """

        for feed in self.camera_ids:
            with Path(self.kmotion_dir, 'core', 'motion_conf', f'camera{feed:02d}.conf').open('w') as f_obj1:
                f_obj1.write('''
# ------------------------------------------------------------------------------
# This config file has been automatically generated by kmotion
# Do __NOT__ modify it in any way.
# ------------------------------------------------------------------------------

event_gap 2
pre_capture 1
post_capture 10

''')
                f_obj1.write(f'camera_id {feed}\n')
                # pal or ntsc,
                f_obj1.write('norm 1\n')

                # feed mask,
                if self.config['feeds'][feed].get('feed_mask', '0#0#0#0#0#0#0#0#0#0#0#0#0#0#0#') != '0#0#0#0#0#0#0#0#0#0#0#0#0#0#0#':
                    self.create_mask(feed)
                    f_obj1.write(f'mask_file {self.kmotion_dir}/core/masks/mask{feed:02d}.pgm\n')

                f_obj1.write('smart_mask_speed {speed}\n'.format(speed=self.config['feeds'][feed].get('feed_smart_mask_speed', 0)))

                # framerate
                fps = self.config['feeds'][feed].get('feed_fps', 1)

                f_obj1.write('minimum_frame_time {0}\n'.format(1 if fps < 2 else 0))
                f_obj1.write(f'framerate {fps}\n')

                f_obj1.write(f'target_dir {self.ramdisk_dir}\n')

                # device and input
                feed_device = self.config['feeds'][feed].get('feed_device', -1)
                if feed_device > -1:  # /dev/video? device
                    f_obj1.write(f'videodevice /dev/video{feed_device}\n')
                    f_obj1.write('input {0}\n'.format(self.config['feeds'][feed].get('feed_input', 0)))
                else:  # netcam
                    f_obj1.write('netcam_keepalive on\n')
                    f_obj1.write('netcam_url {0}\n'.format(self.config['feeds'][feed]['feed_url']))
                    if self.config['feeds'][feed].get('rtsp2mp4_url'):
                        f_obj1.write('netcam_highres {0}\n'.format(self.config['feeds'][feed]['rtsp2mp4_url']))
                    if self.config['feeds'][feed].get('feed_proxy'):
                        f_obj1.write('netcam_proxy {0}\n'.format(self.config['feeds'][feed]['feed_proxy']))
                    f_obj1.write("netcam_userpass {u}:{p}\n".format(
                        u=self.config['feeds'][feed]['feed_lgn_name'],
                        p=self.config['feeds'][feed]['feed_lgn_pw']))

                f_obj1.write('width {0}\n'.format(self.config['feeds'][feed]['feed_width']))
                f_obj1.write('height {0}\n'.format(self.config['feeds'][feed]['feed_height']))

                f_obj1.write('noise_level {0}\n'.format(self.config['feeds'][feed].get('feed_noise_level', 32)))
                f_obj1.write('noise_tune {0}\n'.format('on' if self.config['feeds'][feed].get('feed_noise_tune') else 'off'))
                f_obj1.write('threshold {0}\n'.format(self.config['feeds'][feed].get('feed_threshold', 300)))

                # show motion box
                f_obj1.write('locate_motion_mode {0}\n'.format('on' if self.config['feeds'][feed].get('feed_show_box') else 'off'))
                f_obj1.write('locate_motion_style box\n')

                # f_obj1.write('picture_output {0}\n'.format('on' if fps > 1 else 'off'))
                # f_obj1.write('picture_quality {0}\n'.format(self.config['feeds'][feed].get('feed_quality', 85)))
                f_obj1.write(f'picture_filename {feed:02d}/%Y%m%d%H%M%S%q\n')
                f_obj1.write('snapshot_interval 1\n')
                f_obj1.write(f'snapshot_filename {feed:02d}/%Y%m%d%H%M%S\n')

                f_obj1.write('')

                motion_detector = self.config['feeds'][feed].get('motion_detector', 1)
                if motion_detector == 1:
                    f_obj1.write(f'on_event_start {self.kmotion_dir}/events.py {feed} start\n')
                    f_obj1.write(f'on_event_end {self.kmotion_dir}/events.py {feed} end\n')

                f_obj1.write(f'on_camera_lost {self.kmotion_dir}/camera_lost.py {feed}\n')
                f_obj1.write(f"on_picture_save {self.kmotion_dir}/picture_save.py %f {self.config['feeds'][feed].get('feed_webpicture_scale', 1)}\n")

# Module test code


if __name__ == '__main__':

    print('\nModule self test ... generating motion.conf and cameras\n')
    kmotion_dir = Path(__file__).absolute().parent.parent
    InitMotion(kmotion_dir).gen_motion_configs()
