#!/usr/bin/env python
import shutil


# This file is part of kmotion.

# kmotion is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# kmotion is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with kmotion.  If not, see <http://www.gnu.org/licenses/>.

"""
Exports various methods used to initialize core configuration
"""
from subprocess import *
import logger, os


class InitCore:

    log_level = 'WARNING'
    
    HEADER_TEXT = """
                ##############################################################
                # This config file has been automatically generated by kmotion
                # from www_rc DO NOT CHANGE IT IN ANY WAY !!!
                ##############################################################
                # User defined options
                ##############################################################
                """

    COMPULSORY_TEXT = """
                #############################################################
                # Compulsory options
                #############################################################
                """

    THREAD_TEXT = """
                #############################################################
                # Threads
                #############################################################
                """

    CODE_TEXT = """#!/bin/bash
                # Copyright 2008 David Selby dave6502@googlemail.com
                
                # This file is part of kmotion.
                
                # kmotion is free software: you can redistribute it and/or modify
                # it under the terms of the GNU General Public License as published by
                # the Free Software Foundation, either version 3 of the License, or
                # (at your option) any later version.
                
                # kmotion is distributed in the hope that it will be useful,
                # but WITHOUT ANY WARRANTY; without even the implied warranty of
                # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                # GNU General Public License for more details.
                
                # You should have received a copy of the GNU General Public License
                # along with kmotion.  If not, see <http://www.gnu.org/licenses/>.
                """
    
    def __init__(self, settings):
        self.logger = logger.Logger('init_core', InitCore.log_level)
        self.settings = settings
        self.kmotion_dir = self.settings.get('DEFAULT', 'kmotion_dir')
        with open('%s/www/motion_out' % self.kmotion_dir, 'w'): 
            pass
        
        self.images_dbase_dir = self.settings.get('DEFAULT', 'images_dbase_dir')
        self.port = self.settings.get('DEFAULT', 'port')
        self.ramdisk_dir = self.settings.get('DEFAULT', 'ramdisk_dir')
        self.max_feed = len(self.settings.sections())
        self.version = self.settings.get('DEFAULT', 'version')
        self.title = self.settings.get('DEFAULT', 'title')
        
        

    
    def update_rcs(self):
        """
        Update the rc's during a 'kmotion' or 'kmotion reload'
    
        args    : kmotion_dir ... the 'root' directory of kmotion
              ramdisk_dir ... the 'root' directory of ramdisk
        excepts :
        return  : none
        """
        config_js = '%s/www/www/js/config.js' % self.kmotion_dir
        with open(config_js, 'w') as f_obj:
            print >> f_obj, 'var max_feed=%d;' % self.max_feed
            print >> f_obj, 'var version="%s";' % self.version
            print >> f_obj, 'var title="%s";' % self.title
            print >> f_obj, 'var ramdisk_dir="%s";' % self.ramdisk_dir
    
    

    
        # Sets the 'func_f??_enabled' in 'www_rc' by scanning for valid files in 
        # the 'func' directory. Valid files have the format 'func<01-16>.sh'.
        self.logger.log('update_rcs() - Setting the \'func_f??_enabled\' in \'www_rc\'', 'DEBUG')
    
  
    def init_ramdisk_dir(self):
        """
        Init the ramdisk setting up the kmotion, events and tmp folders.
        Exception trap in case dir created between test and mkdirs.
    
        args    : ramdisk_dir ... the ramdisk dir, normally '/dev/shm'
        excepts :
        return  : none
        """
    
        self.logger.log('init_ramdisk_dir() - creating \'states\' folder', 'DEBUG')
        states_dir = os.path.join(self.ramdisk_dir,'states')
        if not os.path.isdir(states_dir):
            os.makedirs(states_dir)

        for sfile in os.listdir(states_dir):
            state_file=os.path.join(states_dir, sfile)
            if os.path.isfile(state_file):
                self.logger.log('init_ramdisk_dir() - deleting \'%s\' file' % (state_file), 'DEBUG')
                os.remove(state_file)
                    
        events_dir = os.path.join(self.ramdisk_dir,'events')
        if not os.path.isdir(events_dir):
            self.logger.log('init_ramdisk_dir() - creating \'events\' folder', 'DEBUG') 
            os.makedirs(events_dir)
            
        for efile in os.listdir(events_dir):
            event_file=os.path.join(events_dir, efile)
            if os.path.isfile(event_file):
                with open(event_file, 'r') as f_obj:
                    pid = f_obj.read()
                    pid = pid.strip()
                    if pid == '':
                        self.logger.log('init_ramdisk_dir() - deleting \'%s\' file' % (event_file), 'DEBUG')
                        os.remove(event_file)

        for feed in self.settings.sections():
            if not os.path.isdir(os.path.join(self.ramdisk_dir, feed)):
                self.logger.log('init_ramdisk_dir() - creating \'%s\' folder' % feed, 'DEBUG') 
                os.makedirs(os.path.join(self.ramdisk_dir, feed))
                
    def set_uid_gid_mutex(self, uid, gid):
        """
        Set the 'mutex', 'logs', 'www_rc', 'kmotion_rc' and 'servo_state' directories 
        with the appropreate 'uid' and 'gid'to allow the apache2 user to have write 
        access.
    
        args    : kmotion_dir ... the 'root' directory of kmotion 
              uid ...         the user id
              gid ...         the group id of apache2
        excepts : 
        return  : none
        """
    
        mutex_ =      '%s/www/mutex' % self.kmotion_dir
        logs =        '%s/logs' % mutex_
        www_rc =      '%s/www_rc' % mutex_
        kmotion_rc =  '%s/kmotion_rc' % mutex_
    
        os.chown(mutex_, uid, gid)
        os.chmod(mutex_, 0770)
        os.chown(logs, uid, gid)
        os.chmod(logs, 0770)
        os.chown(www_rc, uid, gid)
        os.chmod(www_rc, 0770)
        os.chown(kmotion_rc, uid, gid)
        os.chmod(kmotion_rc, 0770)
        
    def init_motion_out(self):
        motion_out = os.path.join(self.kmotion_dir, 'www/motion_out')
        if os.path.isfile(motion_out):
            os.remove(motion_out)
    

    def set_uid_gid_named_pipes(self, uid, gid):
        """
        Generate named pipes for function, settings and ptz communications with the 
        appropreate 'uid' and 'gid'. The 'uid' and 'gid' are set to allow the 
        apache2 user to write to these files.
    
        args    : kmotion_dir ... the 'root' directory of kmotion 
              uid ...         the user id
              gid ...         the group id of apache2
        excepts : 
        return  : none
        """
    
        fifo_settings = '%s/www/fifo_settings_wr' % self.kmotion_dir
        if not os.path.exists(fifo_settings):
            call(['mkfifo', fifo_settings])
        os.chown(fifo_settings, uid, gid)
        os.chmod(fifo_settings, 0660)

    
    
    def set_uid_gid_servo_state(self, uid, gid):
        """
        Generate 'servo_state' file with the appropreate 'uid' and 'gid'. 
        Called by 'install' and 'core_setup' the 'uid' and 'gid' are set to allow 
        the apache2 user to read these files.
    
        args    : kmotion_dir ... the 'root' directory of kmotion 
              uid ...         the user id
              gid ...         the group id of apache2
        excepts : 
        return  : none
        """
    
        servo_state = '%s/www/servo_state' % self.kmotion_dir
        os.chown(servo_state, uid, gid)
        os.chmod(servo_state, 0640)  

    
    def gen_vhost(self):
        """
        Generate the kmotion vhost file from vhost_template expanding %directory%
        strings to their full paths as defined in kmotion_rc
        
        args    : kmotion_dir ... the 'root' directory of kmotion
        excepts : exit        ... if kmotion_rc cannot be read
        return  : none
        """
    
        self.logger.log('gen_vhost() - Generating vhost/kmotion file', 'DEBUG')
    
        self.logger.log('gen_vhost() - users_digest mode enabled', 'DEBUG')
        LDAP_block = """
                    # ** INFORMATION ** Users digest file enabled ...
                    AuthName "kmotion"
                    AuthUserFile %s/www/passwords/users_digest\n
                    """ % self.kmotion_dir
        kmotion_vhost_dir = '%s/www/vhosts/' % self.kmotion_dir
        if not os.path.isdir(kmotion_vhost_dir):
            os.makedirs(kmotion_vhost_dir)
        with open('%s%s' % (kmotion_vhost_dir,'kmotion'), 'w') as f_obj1:
            with open('%s/www/templates/vhosts_template' % self.kmotion_dir) as f_obj2:                
                lines = f_obj2.readlines()
    
                for i in range(len(lines)):
                    lines[i] = lines[i].replace('%images_dbase_dir%', self.images_dbase_dir)
                    lines[i] = lines[i].replace('%ramdisk_dir%', self.ramdisk_dir)
                    lines[i] = lines[i].replace('%www_dir%', '%s/www/www' % self.kmotion_dir)
                    lines[i] = lines[i].replace('%logs_dir%', '%s/www/apache_logs' % self.kmotion_dir)
                    lines[i] = lines[i].replace('%port%', self.port)
                    lines[i] = lines[i].replace('%LDAP_block%',  LDAP_block)
                f_obj1.write(lines[i])
        
      
    def gen_kmotion(self, uid, gid):
        """
        Generates a kmotion executable which starts the kmotion daemons, executable 
        from anywhere in the system
    
        args    : kmotion_dir ... the 'root' directory of kmotion
              uid ...         the uid for kmotion  
              gid ...         the gid for kmotion  
        excepts : 
        return  : none
        """
    
        code = InitCore.CODE_TEXT + """
# Starts/stop/reloads the kmotion daemons, executable from anywhere in the system
# kmotion start|stop|reload

if [[ $UID = 0 ]]; then
echo -e '\\nkmotion cant be run as root\\n'
exit 0
fi

if [[ $1 != 'start' && $1 != 'stop' && $1 != 'restart' ]]; then
echo -e '\\nkmotion start|stop|restart\\n'
exit 0
fi

if [[ ! -z $2 ]]; then
echo -e '\\nkmotion start|stop|restart\\n'
exit 0
fi

cd %s/core
./kmotion.py $1

""" % self.kmotion_dir
    
        self.logger.log('gen_kmotion() - Generating \'kmotion\' exe', 'DEBUG')
        
        with open('%s/kmotion' % self.kmotion_dir, 'w') as f_obj:
            print >> f_obj, code

            os.chmod('%s/kmotion' % self.kmotion_dir, 0755)
            os.chown('%s/kmotion' % self.kmotion_dir, uid, gid)
    
      
    def gen_kmotion_ptz(self, uid, gid):
        """
        Generates a kmotion_ptz executable which activates a ptz preset, 
        executable from anywhere in the system
    
        args    : kmotion_dir ... the 'root' directory of kmotion
              uid ...         the uid for kmotion  
              gid ...         the gid for kmotion      
        excepts : 
        return  : none
        """
    
        code = InitCore.CODE_TEXT + """
# Activates a ptz preset, executable from anywhere in the system
# kmotion_ptz <feed 1...16> <preset 1...4>

if [[ $UID = 0 ]]; then
echo -e '\\nkmotion_ptz cant be run as root\\n'
exit 0
fi

if [[ $1 = '-h' || $1 = '--help' ]]; then
echo -e '\\nkmotion_ptz <feed 1..16> <preset 1..4>\\n'
exit 0
fi

if [ -z $2 ]; then
echo -e '\\nkmotion_ptz - to few parameters'
echo -e 'kmotion_ptz <feed 1..16> <preset 1..4>\\n'
exit 0
fi

if [ ! -z $3 ]; then
echo -e '\\nkmotion_ptz - to many parameters'
echo -e 'kmotion_ptz <feed 1..16> <preset 1..4>\\n'
exit 0
fi

if [[ $1 -lt 1 || $1 -gt 16 || $2 -lt 1 || $2 -gt 4 ]]; then
echo -e '\\nkmotion_ptz - parameters out of range\\n'
exit 0
fi

cd %s/core
./kmotion_ptz.py $1 $2

""" % self.kmotion_dir
        
        self.logger.log('gen_kmotion_ptz() - Generating \'kmotion_ptz\' exe', 'DEBUG')
    
        with open('%s/kmotion_ptz' % self.kmotion_dir, 'w') as f_obj: 
            print >> f_obj, code

        os.chmod('%s/kmotion_ptz' % self.kmotion_dir, 0755)
        os.chown('%s/kmotion_ptz' % self.kmotion_dir, uid, gid)
    
    

    
    
    
    